services:
  cache:
    image: valkey/valkey:latest
    ports:
      - "16379:6379"
    hostname: cache
    command: redis-server --appendonly yes
    volumes:
      - cache-data:/data
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    restart: unless-stopped
    logging:
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 1s
      timeout: 3s
      retries: 30
  db:
    image: postgres:16
    ports:
      - "15432:5432"
    hostname: db
    environment:
      POSTGRES_PASSWORD: "app_password"
      POSTGRES_USER: "app_user"
      POSTGRES_DB: "chapter-app-db"
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: unless-stopped
    logging:
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test:
        - CMD
        - pg_isready
        - -U
        - app_user
        - -d
        - chapter-app-db
      interval: 2s
      timeout: 3s
      retries: 40
  app:
    build:
      context: .
      dockerfile: deploy/docker/run/Dockerfile
    image: app:latest
    restart: always
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      SAQ_USE_SERVER_LIFESPAN: "false"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
  worker:
    image: app:latest
    command: litestar workers run
    restart: always
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    env_file:
      - .env
  migrator:
    image: app:latest
    restart: "no"
    command: litestar database upgrade --no-prompt
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
  frontend:
    build:
      context: .
      dockerfile: deploy/docker/run/Dockerfile.frontend
    image: frontend:latest
    restart: always
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "3000:3000"
    env_file:
      - .env
volumes:
  db-data: {}
  cache-data: {}
