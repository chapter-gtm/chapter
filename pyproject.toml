[tool.poetry]
authors = ["Cody Fincher <cody.fincher@gmail.com>"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development",
  "Typing :: Typed",
]
description = "Opinionated template for integrating Starlite with a SPA"
documentation = "https://cofin.github.io/starlite-full-stack-example"
homepage = "https://github.com/cofin/starlite-full-stack-example"
include = ["CHANGELOG.md"]
keywords = ["api", "rest", "http", "asgi", "pydantic", "starlite", "fastapi", "framework", "websocket", "vite", "spa"]
license = "MIT"
maintainers = ["Cody Fincher <cody.fincher@gmail.com>"]
name = "app"
packages = [
  {include = "app", from = "src/server"},
]
readme = "README.md"
repository = "https://github.com/cofin/starlite-full-stack-example"
version = "0.1.0"
[tool.poetry.scripts]
app = "app.main:run_cli"

[tool.poetry.dependencies]
alembic = "*"
asyncpg = "*"
hiredis = "*"
passlib = {version = "*", extras = ["argon2"]}
pydantic = {version = ">=1.9.0", extras = [
  "dotenv",
  "typing_extensions",
  "email",
]}
python = ">=3.10,<4.0"
redis = ">=4.4.2"
rich-click = ">=1.6.0"
sqlalchemy = {version = ">=1.4.42", allow-prereleases = true}
starlite = {version = ">=1.35", extras = ["standard", "jwt", 'cli', 'redis']}
starlite-saqlalchemy = {git = "https://github.com/cofin/starlite-saqlalchemy.git", branch = "saq-reconnect", extras = ["cache","worker","sqlalchemy"]}
uvicorn = {extras = ["standard"], version = "*"}
greenlet = {version = ">=2.0.1", platform = "darwin"}
uvloop = "*"

[tool.poetry.group.dev.dependencies]
coverage = {extras = ["toml"], version = "*"}
cython = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-docker = "*"
pytest-dotenv = "*"
pytest-mock = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
asyncpg-stubs = "*"
black = "*"
blacken-docs = "*"
mypy = "*"
pre-commit = "*"
pylint = "*"
pylint-pydantic = "*"
ruff = '*'
slotscheck = "*"
types-click = "*"
types-passlib = "*"
types-python-jose = "*"
types-pyyaml = "*"
types-redis = "*"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core", "setuptools", "wheel", "cython"]

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == '__main__':",
]
show_missing = true

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--cov=app -v --doctest-modules --doctest-glob=*.md --ignore=migrations"
asyncio_mode = "auto"
env_files = [".env.example"]

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  '__pycache__',
]
fix = true
ignore = [
  'B008',
  'B009',
  'C408',
  'C417',
  "D100",
  "D203",
  "D204",
  "D213",
  "D215",
  "D400",
  "D404",
  "D406",
  "D407",
  "D408",
  "D409",
  "D413",
  'E501',
  "N818",
]
line-length = 120
select = [
  'B',
  'C',
  'D',
  'E',
  'F',
  'N',
  'W',
  'I',
  'UP',
  'S',
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Assume Python 3.11.
src = ["src/server", "tests/"]
target-version = "py311"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.pep8-naming]
classmethod-decorators = [
  'classmethod',
  'validator',
  'root_validator',
  'declared_attr',
]

[tool.ruff.per-file-ignores]
"__init__.py" = ['F401']
"tests/*.py" = ['D103','S101','D104']
"*/migrations/*.py" = ['D104','D103','D205','D212']

[tool.ruff.isort]
known-first-party = [ 'tests']
