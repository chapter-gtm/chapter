[tool.poetry]
name = "pyspa"
version = "0.1.0"
description = "Opinionated template for integrating Starlite with a SPA"
authors = ["Cody Fincher <cody.fincher@gmail.com>"]
maintainers = ["Cody Fincher <cody.fincher@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/cofin/pyspa"
repository = "https://github.com/cofin/pyspa"
documentation = "https://cofin.github.io/pyspa"
keywords = ["api", "rest", "http", "asgi", "pydantic", "starlette", "fastapi", "framework", "websocket", "vite", "spa"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]
include = ["CHANGELOG.md"]
packages = [
    { include = "pyspa", from = "src" },
]
[tool.poetry.scripts]
pyspa = "pyspa.__main__:main"
pg-ready = "pyspa.utils.postgres_ready:main"
redis-ready = "pyspa.utils.redis_ready:main"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
starlite-jwt = {git = "https://github.com/starlite-api/starlite-jwt.git", branch = "main"}
pydantic = {extras = ["dotenv","email"], version = "*"}
passlib = {version = "*", extras = ["argon2"]}
httpx = "*"
typer = "*"
uvicorn = {extras = ["standard"], version = "*"}
sqlalchemy = {git = "https://github.com/sqlalchemy/sqlalchemy.git", branch = "main", extras = ["asyncio"]}
starlite = {git = "https://github.com/starlite-api/starlite.git", branch = "main", extras = ["brotli", "picologging"]}
alembic = "*"
asyncpg = "*"
redis = "*"
hiredis = "*"
rich = "*"

[tool.poetry.group.dev.dependencies]
Jinja2 = "*"
autoflake = "*"
bandit = "*"
blacken-docs = "*"
bump2version = "*"
coverage = {extras = ["toml"], version = "*"}
cython = "*"
flake8 = "*"
flake8-bugbear = "*"
flake8-comprehensions = "*"
flake8-mutable = "*"
flake8-print = "*"
flake8-simplify = "*"
flake8-type-checking = "*"
freezegun = "*"
hypothesis = {extras = ["cli"], version = "*"}
isort = "*"
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"
mypy = "*"
pre-commit = "*"
pylint = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-dotenv = "*"
pytest-mock = "*"
pyupgrade = "*"
slotscheck = "*"
tox = "*"
types-freezegun = "*"
types-passlib = "*"
types-python-jose = "*"
types-pyyaml = "*"
types-redis = "*"
types-requests = "*"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core", "setuptools", "wheel", "cython"]

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120
[tool.autoflake]
check = true

[tool.isort]
line_length = 119
multi_line_output = 3
profile = "black"
skip_gitignore = true
src_paths = ["src", "test"]



[tool.coverage.run]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'except ImportError as e:',
    '\.\.\.',
    "if __name__ == '__main__':",
]

[tool.pytest.ini_options]
addopts = "--cov=src -v --doctest-modules --doctest-glob=*.md --ignore=migrations"
asyncio_mode = "auto"
env_files = [".env.example"]
