# type: ignore
"""Make person to (current) company a one-to-many relation instead of many-to-many

Revision ID: 2a0170b3ad46
Revises: 2c90c4d21f4b
Create Date: 2024-08-30 15:23:00.363626+00:00

"""
from __future__ import annotations

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401
from sqlalchemy.dialects import postgresql
if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = '2a0170b3ad46'
down_revision = '2c90c4d21f4b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('company_person_relation', schema=None) as batch_op:
        batch_op.drop_index('ix_company_person_relation_company_id')
        batch_op.drop_index('ix_company_person_relation_title')

    op.drop_table('company_person_relation')
    with op.batch_alter_table('job_post', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_job_post_company_id'), ['company_id'], unique=False)

    with op.batch_alter_table('person', schema=None) as batch_op:
        batch_op.add_column(sa.Column('title', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('company_id', sa.GUID(length=16), nullable=True))
        batch_op.create_index(batch_op.f('ix_person_company_id'), ['company_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_person_headline'), ['headline'], unique=False)
        batch_op.create_index(batch_op.f('ix_person_title'), ['title'], unique=False)
        batch_op.create_foreign_key(batch_op.f('fk_person_company_id_company'), 'company', ['company_id'], ['id'])

    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('person', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_person_company_id_company'), type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_person_title'))
        batch_op.drop_index(batch_op.f('ix_person_headline'))
        batch_op.drop_index(batch_op.f('ix_person_company_id'))
        batch_op.drop_column('company_id')
        batch_op.drop_column('title')

    with op.batch_alter_table('job_post', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_job_post_company_id'))

    op.create_table('company_person_relation',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('person_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sa_orm_sentinel', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], name='fk_company_person_relation_company_id_company', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], name='fk_company_person_relation_person_id_person', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('company_id', 'person_id', 'id', name='pk_company_person_relation')
    )
    with op.batch_alter_table('company_person_relation', schema=None) as batch_op:
        batch_op.create_index('ix_company_person_relation_title', ['title'], unique=False)
        batch_op.create_index('ix_company_person_relation_company_id', ['company_id'], unique=False)

    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
