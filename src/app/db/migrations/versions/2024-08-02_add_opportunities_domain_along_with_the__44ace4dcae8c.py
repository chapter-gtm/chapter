# type: ignore
"""Add opportunities domain along with the model

Revision ID: 44ace4dcae8c
Revises: 269b038e5545
Create Date: 2024-08-02 12:32:53.948339+00:00

"""
from __future__ import annotations

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401
from sqlalchemy.dialects import postgresql

from app.db.models.custom_types import OpportunityStageType

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = "44ace4dcae8c"
down_revision = "269b038e5545"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "opportunity",
        sa.Column("id", sa.GUID(length=16), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("stage", OpportunityStageType(), nullable=False),
        sa.Column("notes", sa.Text(), nullable=False),
        sa.Column("tenant_id", sa.GUID(length=16), nullable=False),
        sa.Column("owner_id", sa.GUID(length=16), nullable=True),
        sa.Column("company_id", sa.GUID(length=16), nullable=True),
        sa.Column("slug", sa.String(length=100), nullable=False),
        sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["company_id"], ["company.id"], name=op.f("fk_opportunity_company_id_company")),
        sa.ForeignKeyConstraint(["owner_id"], ["user_account.id"], name=op.f("fk_opportunity_owner_id_user_account")),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name=op.f("fk_opportunity_tenant_id_tenant")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_opportunity")),
    )
    with op.batch_alter_table("opportunity", schema=None) as batch_op:
        batch_op.create_index("ix_opportunity_id_tenant_id", ["id", "tenant_id"], unique=False)
        batch_op.create_index(batch_op.f("ix_opportunity_name"), ["name"], unique=False)
        batch_op.create_index(batch_op.f("ix_opportunity_stage"), ["stage"], unique=False)
        batch_op.create_index(batch_op.f("ix_opportunity_tenant_id"), ["tenant_id"], unique=False)

    op.create_table(
        "opportunity_audit_log",
        sa.Column("id", sa.GUID(length=16), nullable=False),
        sa.Column("operation", sa.String(), nullable=False),
        sa.Column("diff", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("user_id", sa.GUID(length=16), nullable=False),
        sa.Column("tenant_id", sa.GUID(length=16), nullable=False),
        sa.Column("opportunity_id", sa.GUID(length=16), nullable=False),
        sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["opportunity_id"], ["opportunity.id"], name=op.f("fk_opportunity_audit_log_opportunity_id_opportunity")
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name=op.f("fk_opportunity_audit_log_tenant_id_tenant")),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user_account.id"], name=op.f("fk_opportunity_audit_log_user_id_user_account")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_opportunity_audit_log")),
    )
    with op.batch_alter_table("opportunity_audit_log", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_opportunity_audit_log_opportunity_id"), ["opportunity_id"], unique=False)
        batch_op.create_index(
            "ix_opportunity_audit_log_opportunity_id_tenant_id", ["opportunity_id", "tenant_id"], unique=False
        )

    op.create_table(
        "opportunity_person_relation",
        sa.Column("opportunity_id", sa.GUID(length=16), nullable=False),
        sa.Column("person_id", sa.GUID(length=16), nullable=False),
        sa.ForeignKeyConstraint(
            ["opportunity_id"],
            ["opportunity.id"],
            name=op.f("fk_opportunity_person_relation_opportunity_id_opportunity"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["person.id"],
            name=op.f("fk_opportunity_person_relation_person_id_person"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("opportunity_id", "person_id", name=op.f("pk_opportunity_person_relation")),
    )
    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("opportunity_person_relation")
    with op.batch_alter_table("opportunity_audit_log", schema=None) as batch_op:
        batch_op.drop_index("ix_opportunity_audit_log_opportunity_id_tenant_id")
        batch_op.drop_index(batch_op.f("ix_opportunity_audit_log_opportunity_id"))

    op.drop_table("opportunity_audit_log")
    with op.batch_alter_table("opportunity", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_opportunity_tenant_id"))
        batch_op.drop_index(batch_op.f("ix_opportunity_stage"))
        batch_op.drop_index(batch_op.f("ix_opportunity_name"))
        batch_op.drop_index("ix_opportunity_id_tenant_id")

    op.drop_table("opportunity")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
