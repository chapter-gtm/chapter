# type: ignore
"""Add indexes

Revision ID: fcd73c05b135
Revises: c0f545bc18c8
Create Date: 2024-11-08 14:58:24.735662+00:00

"""
from __future__ import annotations

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = "fcd73c05b135"
down_revision = "c0f545bc18c8"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("job_post", schema=None) as batch_op:
        batch_op.create_index("ix_job_post_id", ["id"], unique=False)

    with op.batch_alter_table("opportunity", schema=None) as batch_op:
        batch_op.create_index("idx_opportunity_created_at", ["tenant_id", sa.text("created_at DESC")], unique=False)

    with op.batch_alter_table("opportunity_job_post_relation", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_opportunity_job_post_relation_opportunity_id"), ["opportunity_id"], unique=False
        )

    with op.batch_alter_table("opportunity_person_relation", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_opportunity_person_relation_opportunity_id"), ["opportunity_id"], unique=False
        )

    with op.batch_alter_table("person", schema=None) as batch_op:
        batch_op.drop_index("ix_person_slug_unique")
        batch_op.drop_constraint("uq_person_slug", type_="unique")
        batch_op.create_index("ix_person_id", ["id"], unique=False)

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("person", schema=None) as batch_op:
        batch_op.drop_index("ix_person_id")
        batch_op.create_unique_constraint("uq_person_slug", ["slug"])
        batch_op.create_index("ix_person_slug_unique", ["slug"], unique=True)

    with op.batch_alter_table("opportunity_person_relation", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_opportunity_person_relation_opportunity_id"))

    with op.batch_alter_table("opportunity_job_post_relation", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_opportunity_job_post_relation_opportunity_id"))

    with op.batch_alter_table("opportunity", schema=None) as batch_op:
        batch_op.drop_index("idx_opportunity_created_at")

    with op.batch_alter_table("job_post", schema=None) as batch_op:
        batch_op.drop_index("ix_job_post_id")

    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
